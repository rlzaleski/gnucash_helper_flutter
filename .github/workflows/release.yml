name: Release Build

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Or your desired channel

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Get dependencies
        run: flutter pub get

      - name: Build Linux release
        run: flutter build linux --release

      - name: Archive Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: build/linux/x64/release/bundle/ # Adjust path if your Flutter output is different

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Or your desired channel

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Get dependencies
        run: flutter pub get

      - name: Build Windows release
        run: flutter build windows --release

      - name: Archive Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: build/windows/runner/Release/ # Adjust path if your Flutter output is different (check build/windows/PROJECT_NAME/Release for newer flutter versions)

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows] # Run after both builds are successful
    permissions:
      contents: write # Required to create releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-release
          path: artifacts/linux

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-release
          path: artifacts/windows
      
      - name: Determine Release Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Optional: Create archives (e.g., tar.gz for Linux, zip for Windows)
      - name: Archive Linux bundle
        run: |
          mkdir -p release_assets
          tar -czvf release_assets/linux-release-${{ steps.get_version.outputs.VERSION }}.tar.gz -C artifacts/linux .
      
      - name: Archive Windows bundle
        run: |
          # Using 7z for better compression if available, otherwise zip
          if command -v 7z &> /dev/null; then
            7z a release_assets/windows-release-${{ steps.get_version.outputs.VERSION }}.zip ./artifacts/windows/*
          else
            zip -r release_assets/windows-release-${{ steps.get_version.outputs.VERSION }}.zip ./artifacts/windows
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for version ${{ github.ref_name }}
            Includes builds for Linux and Windows.
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/linux-release-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_name: linux-release-${{ steps.get_version.outputs.VERSION }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/windows-release-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: windows-release-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
